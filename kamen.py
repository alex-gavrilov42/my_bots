import logging
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
)
import random
import sqlite3

conn = sqlite3.connect("./kamen_bd.sqlite3")
cursor = conn.cursor()
cursor.execute(
    "CREATE TABLE IF NOT EXISTS users(id INT PRIMARY KEY, username TEXT,wins INT,lose INT)"
)
conn.commit()
conn.close()

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    conn = sqlite3.connect("./kamen_bd.sqlite3")
    cursor = conn.cursor()
    select = cursor.execute(
        f"SELECT id from users where id = {update.effective_user.id}"
    )
    data = select.fetchone()
    if data == None:
        cursor.execute(
            f'INSERT INTO users VALUES({update.effective_user.id}, "{update.effective_user.username}",0,0)'
        )
        conn.commit()
    conn.close()

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ø—Ä–∏–≤–µ—Ç —ç—Ç–æ –±–æ—Ç –∫–∞–º–µ–Ω—å –Ω–æ–∂–Ω–∏—Ü—ã –±—É–º–∞–≥–∞",
        reply_markup=markup,
    )


async def game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    a = random.randint(1, 3)
    result = 0
    player_choise = update.effective_message.text
    dic = {1: "–∫–∞–º–µ–Ω—å", 2: "–Ω–æ–∂–Ω–∏—Ü—ã", 3: "–±—É–º–∞–≥–∞"}
    comp_choise = dic[a]
    text = comp_choise + "\n"
    if comp_choise == player_choise:
        text = text + "–Ω–∏—á—å—èü§®"
    if comp_choise == "–∫–∞–º–µ–Ω—å" and player_choise == "–±—É–º–∞–≥–∞":
        text = text + "–ø–æ–±–µ–¥–∞ü•≥"
        result = 1
    if comp_choise == "–∫–∞–º–µ–Ω—å" and player_choise == "–Ω–æ–∂–Ω–∏—Ü—ã":
        text += "–ø—Ä–æ–∏–≥—Ä—ã—àüòî"
        result = 2
    if comp_choise == "–Ω–æ–∂–Ω–∏—Ü—ã" and player_choise == "–∫–∞–º–µ–Ω—å":
        text += "–ø–æ–±–µ–¥–∞ü•≥"
        result = 1
    if comp_choise == "–Ω–æ–∂–Ω–∏—Ü—ã" and player_choise == "–±—É–º–∞–≥–∞":
        text += "–ø—Ä–æ–∏–≥—Ä—ã—àüòî"
        result = 2
    if comp_choise == "–±—É–º–∞–≥–∞" and player_choise == "–Ω–æ–∂–Ω–∏—Ü—ã":
        text += "–ø–æ–±–µ–¥–∞ü•≥"
        result = 1
    if comp_choise == "–±—É–º–∞–≥–∞" and player_choise == "–∫–∞–º–µ–Ω—å":
        text += "–ø—Ä–æ–∏–≥—Ä—ã—àüòî"
        result = 2
    conn = sqlite3.connect("./kamen_bd.sqlite3")
    cursor = conn.cursor()
    select = cursor.execute(
        f"SELECT id , wins , lose FROM users where  id = {update.effective_user.id}"
    )

    data = select.fetchone()
    if result == 1:
        cursor.execute(
            f"UPDATE users SET wins={data[1]+1} WHERE id = {update.effective_user.id}"
        )
    elif result == 2:
        cursor.execute(
            f"UPDATE users SET lose={data[2]+1} WHERE id = {update.effective_user.id}"
        )
    conn.commit()
    print(data)
    conn.close()
    keyboard = [
        [InlineKeyboardButton("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistic")],
        [InlineKeyboardButton("–ø–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="repiet")],
    ]
    markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=markup,
    )


async def callback_proc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –≤ —ç—Ç–æ–π —Ñ—É–Ω—Ü–∏–∏ –∞–ø–¥–µ–π—Ç –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã
    # –¥–æ—Å—Ç–∞–µ—à—å –∑–∞–ø—Ä–æ—Å –∏–∑ update
    query = update.callback_query
    # –Ω–∞ –ª—é–±–æ–π callback –Ω—É–∂–Ω–æ –¥–∞–≤–∞—Ç—å –æ—Ç–≤–µ—Ç
    await query.answer()

    data = query.data  # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–Ω–æ–ø–∫–∏
    # —ç—Ç–æ –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã
    if data == "statistic":
        conn = sqlite3.connect("./kamen_bd.sqlite3")
        cursor = conn.cursor()
        reselt = cursor.execute(
            f"SELECT id,wins,lose FROM users WHERE id={update.effective_user.id}"
        ).fetchone()
        text = f"–≤–∞—à–∞ —Å—Ç–∞–∏—Å—Ç–∏–∫–∞:–ø–æ–±–µ–¥—ã-{reselt[1]}\n,–ø—Ä–æ–∏–≥—Ä—ã—à–∏-{reselt[2]}"
        conn.close()
        keyboard = [[InlineKeyboardButton("–ø–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="repiet")]]
        markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            text=text,
            reply_markup=markup,
        )
    elif data == "repiet":
        await start(update, context)


async def stat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pass
    # return –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É '–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:/n–ü–æ'


if __name__ == "__main__":
    application = (
        ApplicationBuilder()
        .token("7037936272:AAEtrQ2z5qcCFi3OgP4Oj9LrdhWsqkPMVXk")
        .build()
    )
    print()

    start_handler = CommandHandler("start", start)
    application.add_handler(start_handler)
    application.add_handler(
        MessageHandler(filters.Regex("^(–∫–∞–º–µ–Ω—å|–Ω–æ–∂–Ω–∏—Ü—ã|–±—É–º–∞–≥–∞)$"), callback=game)
    )
    application.add_handler(CallbackQueryHandler(callback=callback_proc))
    application.run_polling()
